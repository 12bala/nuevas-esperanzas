diff --git a/core/modules/views/src/Plugin/views/filter/NumericFilter.php b/core/modules/views/src/Plugin/views/filter/NumericFilter.php
index af30472..40544aa 100644
--- a/core/modules/views/src/Plugin/views/filter/NumericFilter.php
+++ b/core/modules/views/src/Plugin/views/filter/NumericFilter.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\views\Plugin\views\filter;
 
+use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -114,6 +115,22 @@ function operators() {
   }
 
   /**
+   * Options form subform for setting the operator.
+   */
+  protected function operatorForm(&$form, FormStateInterface $form_state) {
+    parent::operatorForm($form, $form_state);
+
+    // Set the operator title and subscription if exposed.
+    if ($exposed = $form_state->get('exposed')) {
+      $form['operator']['#title'] = $this->exposedInfo()['label'];
+      $form['operator']['#description'] = $this->exposedInfo()['description'];
+      // Add container to group multiple elements of one filter.
+      // Start enclosure here and finish after input form element.
+      $form['operator']['#prefix'] = '<span class="views-filter-wrapper views-filter-' . Html::cleanCssIdentifier($this->options['expose']['identifier']) . '">';
+    }
+  }
+
+  /**
    * Provide a list of all the numeric operators
    */
   public function operatorOptions($which = 'title') {
@@ -150,6 +167,7 @@ protected function valueForm(&$form, FormStateInterface $form_state) {
       $source = ':input[name="options[operator]"]';
     }
 
+    $first_element = 'min';
     if ($exposed = $form_state->get('exposed')) {
       $identifier = $this->options['expose']['identifier'];
 
@@ -159,6 +177,7 @@ protected function valueForm(&$form, FormStateInterface $form_state) {
       }
       else {
         $source = ':input[name="' . $this->options['expose']['operator_id'] . '"]';
+        $first_element = 'operator';
       }
     }
 
@@ -199,16 +218,22 @@ protected function valueForm(&$form, FormStateInterface $form_state) {
     if ($which == 'all' || $which == 'minmax') {
       $form['value']['min'] = array(
         '#type' => 'textfield',
-        '#title' => !$exposed ? $this->t('Min') : $this->exposedInfo()['label'],
         '#size' => 30,
         '#default_value' => $this->value['min'],
         '#description' => !$exposed ? '' : $this->exposedInfo()['description']
       );
+      if ($exposed && in_array($this->operator, $this->operatorValues(2))) {
+        $form['value']['min']['#title'] = $this->exposedInfo()['label'];
+        $form['value']['min']['#description'] = $this->exposedInfo()['description'];
+      } else {
+        $form['value']['min']['#title'] = $this->t('Min');
+      }
       $form['value']['max'] = array(
         '#type' => 'textfield',
-        '#title' => !$exposed ? $this->t('And max') : $this->t('And'),
+        '#title' => $exposed ? '' : $this->t('And max'),
         '#size' => 30,
         '#default_value' => $this->value['max'],
+        '#field_prefix' => $exposed ? $this->t('and') : '', // Add separating label.
       );
       if ($which == 'all') {
         $states = array();
@@ -236,6 +261,26 @@ protected function valueForm(&$form, FormStateInterface $form_state) {
         );
       }
     }
+    // Add container to group multiple elements of one filter.
+    if ($first_element == 'min' &&  $which == 'minmax') {
+      // Start enclosure here if there is no select operator.
+      $form['value']['#prefix'] = '<span class="views-filter-wrapper views-filter-' . Html::cleanCssIdentifier($identifier) . '">';
+    }
+    if ($first_element == 'operator' || $which == 'all' || $which == 'minmax') {
+      // End enclosure here if there was more than one form item.
+      $form['value']['#suffix'] = '</span>';
+    }
+
+    // Add class to items with no title.
+    if (empty($form['value']['value']['#title'])) {
+      $form['value']['value']['#attributes']['class'][] = 'no-label';
+    }
+    if (empty($form['value']['min']['#title'])) {
+      $form['value']['min']['#attributes']['class'][] = 'no-label';
+      }
+    if (empty($form['value']['max']['#title'])) {
+      $form['value']['max']['#attributes']['class'][] = 'no-label';
+    }
   }
 
   public function query() {
@@ -345,3 +390,4 @@ public function acceptExposedInput($input) {
   }
 
 }
+
diff --git a/core/modules/views_ui/src/Tests/FilterNumericWebTest.php b/core/modules/views_ui/src/Tests/FilterNumericWebTest.php
index f891995..2b0700e 100644
--- a/core/modules/views_ui/src/Tests/FilterNumericWebTest.php
+++ b/core/modules/views_ui/src/Tests/FilterNumericWebTest.php
@@ -112,6 +112,80 @@ public function testFilterNumericUI() {
     $this->assertRaw('<label for="edit-age-min">Age between</label>', 'Min field label found');
     // Check that the description is shown in the right place.
     $this->assertEqual(trim($this->cssSelect('.form-item-age-min .description')[0]), 'Description of the exposed filter');
+
+    // Test if label and description are still visible if you have more than one
+    // exposed filter form element (select and one input, select and two inputs,
+    // or two inputs.
+    $label = 'Age filter';
+    $label_not_found = 'Label not found on other form item.';
+    $description = 'Age filter description';
+    $description_not_found = 'Description not found on (other) form item';
+
+    // Prepare view with numeric filter.
+    $this->drupalGet('admin/structure/views/nojs/handler/test_view/default/filter/age');
+
+    // Test the selector and value, min and max fields have the correct label
+    // and no description when viewed in the settings UI.
+    $this->assertEqual(trim($this->cssSelect('#edit-options-operator--wrapper .fieldset-legend')[0]), 'Operator');
+    // When the isNull and notIsNull options are available the total number of
+    // options > 10, so they get rendered as a select.
+    //$this->assertEqual(trim($this->cssSelect('.form-item-options-operator label')[0]), 'Operator');
+    $this->assertEqual(count($this->cssSelect('.form-item-options-operator description')), 0, $description_not_found);
+    $this->assertEqual(trim($this->cssSelect('.form-item-options-value-value label')[0]), 'Value');
+    $this->assertEqual(count($this->cssSelect('.form-item-options-value-value description')), 0, $description_not_found);
+    $this->assertEqual(trim($this->cssSelect('.form-item-options-value-min label')[0]), 'Min');
+    $this->assertEqual(count($this->cssSelect('.form-item-options-value-min description')), 0, $description_not_found);
+    $this->assertEqual(trim($this->cssSelect('.form-item-options-value-max label')[0]), 'And max');
+    $this->assertEqual(count($this->cssSelect('.form-item-options-value-max description')), 0, $description_not_found);
+
+    // First try two inputs, no select.
+    $edit = array();
+    $edit['options[expose][label]'] = $label;
+    $edit['options[expose][description]'] = $description;
+    $edit['options[value][min]'] = 26;
+    $edit['options[value][max]'] = 28;
+    $edit['options[operator]'] = 'between';
+    $this->drupalPostForm(NULL, $edit, t('Apply'));
+    $this->drupalPostForm('admin/structure/views/view/test_view', array(), t('Save'));
+    $this->assertConfigSchemaByName('views.view.test_view');
+    $this->drupalPostForm(NULL, array(), t('Update preview'));
+    // The first form item should have the label and description: the min field.
+    $this->assertEqual(trim($this->cssSelect('.form-item-age-min label')[0]), $label);
+    $this->assertEqual(trim($this->cssSelect('.form-item-age-min .description')[0]), $description);
+    // The other form item should have no label or description: the max field.
+    $this->assertEqual(count($this->cssSelect('.form-item-age-max label')), 0, $label_not_found);
+    $this->assertEqual(count($this->cssSelect('.form-item-age-max .description')), 0, $description_not_found);
+
+    // Next try two inputs and one select.
+    $this->drupalGet('admin/structure/views/nojs/handler/test_view/default/filter/age');
+    $edit = array();
+    $edit['options[expose][use_operator]'] = 1;
+    $this->drupalPostForm(NULL, $edit, t('Apply'));
+    $this->drupalPostForm('admin/structure/views/view/test_view', array(), t('Save'));
+    $this->assertConfigSchemaByName('views.view.test_view');
+    $this->drupalPostForm(NULL, array(), t('Update preview'));
+    // The first form item should have the label and description: the select.
+    $this->assertEqual(trim($this->cssSelect('.form-item-age-op label')[0]), $label);
+    $this->assertEqual(trim($this->cssSelect('.form-item-age-op .description')[0]), $description);
+    // The other form items should have no label or description: the min and max field.
+    $this->assertEqual(count($this->cssSelect('.form-item-age-min label')), 0, $label_not_found);
+    $this->assertEqual(count($this->cssSelect('.form-item-age-min .description')), 0, $description_not_found);
+    $this->assertEqual(count($this->cssSelect('.form-item-age-max label')), 0, $label_not_found);
+    $this->assertEqual(count($this->cssSelect('.form-item-age-max .description')), 0, $description_not_found);
+
+    // Last try one inputs and one select.
+    $this->drupalGet('admin/structure/views/nojs/handler/test_view/default/filter/age');
+    $edit = array();
+    $edit['options[operator]'] = '<';
+    $this->drupalPostForm(NULL, $edit, t('Apply'));
+    $this->drupalPostForm('admin/structure/views/view/test_view', array(), t('Save'));
+    $this->assertConfigSchemaByName('views.view.test_view');
+    $this->drupalPostForm(NULL, array(), t('Update preview'));
+    // The first form item should have the label and description: the select.
+    $this->assertEqual(trim($this->cssSelect('.form-item-age-op label')[0]), $label);
+    $this->assertEqual(trim($this->cssSelect('.form-item-age-op .description')[0]), $description);
+    // The other form item should have no label or description: the value field.
+    $this->assertEqual(count($this->cssSelect('.form-item-age-value label')), 0, $label_not_found);
+    $this->assertEqual(count($this->cssSelect('.form-item-age-value .description')), 0, $description_not_found);
   }
-
 }
