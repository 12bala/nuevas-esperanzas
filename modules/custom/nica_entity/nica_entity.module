<?php

/**
 * @file
 *   Contains the nica_entity.module file for the Nica Entity module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\nica_entity\Entity\NicaEntityContentType;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function nica_entity_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nica_entity module.
    case 'help.page.nica_entity':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a bundle-able Nica entity used to store Nica content.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function nica_entity_theme($existing, $type, $theme, $path) {
  $theme = [];
  $theme['nica_entity'] = [
    'render element' => 'elements',
  ];
  $theme['nica_entity_add_list'] = [
    'variables' => [
      'bundles' => [],
      'bundle_type' => NULL,
    ],
  ];
  return $theme;
}


/**
 * Implements hook_entity_extra_field_info().
 */
function nica_entity_entity_extra_field_info() {
  $extra = array();
  $description = t('Nica entity module element');
  foreach (NicaEntityContentType::loadMultiple() as $bundle) {
    $extra['nica_entity'][$bundle->id()]['display']['links'] = array(
      'label' => t('Links'),
      'description' => $description,
      'weight' => 100,
      'visible' => TRUE,
    );
  }

  return $extra;
}

/**
 * Prepares variables for nica_entity templates.
 *
 * Default template: nica-entity.html.twig.
 *
 * Most themes use their own copy of nica-entity.html.twig. The default is located
 * inside "nica-entity/templates/nica-entity.html.twig". Look in there for the
 * full list of variables.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - nica_entity: The nica entity.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_nica_entity(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';
  $variables['nica_entity'] = $variables['elements']['#nica_entity'];
  /** @var \Drupal\nica_entity\Entity\NicaEntityContent $nica_entity */
  $nica_entity = $variables['nica_entity'];
  $variables['date'] = drupal_render($variables['elements']['created']);
  unset($variables['elements']['created']);
  $variables['author_name'] = drupal_render($variables['elements']['uid']);
  unset($variables['elements']['uid']);

  $variables['url'] = $nica_entity->url('canonical', array(
    'language' => $nica_entity->language(),
  ));
  $variables['label'] = $nica_entity->label();

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Display post information only on certain nica_entity types.
  // Used by RDF to add attributes around the author and date submitted.
  $variables['author_attributes'] = new Attribute();

  // Add article ARIA role.
  $variables['attributes']['role'] = 'article';
}

/**
 * Prepares variables for the list of available bundles.
 *
 * Default template: nica-entity-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - bundle_type: The entity type of the bundles.
 *   - bundles: An array of bundles with the label, description, add_link keys.
 */
function template_preprocess_nica_entity_add_list(&$variables) {
  $bundle_type = \Drupal::entityTypeManager()->getDefinition($variables['bundle_type']);
  $variables += [
    'create_bundle_url' => Url::fromRoute('entity.' . $bundle_type->id() . '.add_form')->toString(),
    'bundle_type_label' => $bundle_type->getLowercaseLabel(),
  ];

  foreach ($variables['bundles'] as $bundle_name => $bundle_info) {
    $variables['bundles'][$bundle_name]['description'] = [
      '#markup' => $bundle_info['description'],
    ];
  }
}
